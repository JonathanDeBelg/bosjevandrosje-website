{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{# {%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="paragraph-wrapper">
        {{ content }}
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %} #}

{% set show_background_color = paragraph.field_show_background_color.value %}
{% set show_right = paragraph.field_show_image_on_the_right.value %}
{% set show_as_background = paragraph.field_show_image_as_background.value %}
{% set image_url = content.field_textbox_image['#item'].entity.uri.value is defined
  ? file_url(content.field_textbox_image['#item'].entity.uri.value)
  : null %}
  
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  show_background_color ? 'row-has-background-color' : null,
  show_as_background ? 'row-style-background-image' : 'row-style-basic-image',
  show_right ? 'row-text-right' : 'row-text-left',
] %}

<div{{ attributes.addClass(classes, ) }}>
  {% if show_as_background and image_url %}
    <div class="bg-cover bg-center" style="background-image: url('{{ image_url }}')">
      <div class="container mx-auto">
        <div class="col-md-8 md-auto">
          <div class="text-wrapper bg-white/80 p-6 rounded-md {{ show_right ? 'text-right' : '' }}">
            {{ content.field_textbox }}
          </div>
        </div>
      </div>
    </div>
  {% else %}
    <div class="container mx-auto">
      <div class="col-12">
        <div class="d-flex row-wrapper items-center">
          {% if show_right %}
            <div class="text">{{ content.field_textbox }}</div>
            <div class="image">{{ content.field_textbox_image }}</div>
          {% else %}
            <div class="image">{{ content.field_textbox_image }}</div>
            <div class="text">{{ content.field_textbox }}</div>
          {% endif %}
        </div>
      </div>
    </div>
  {% endif %}
</div>